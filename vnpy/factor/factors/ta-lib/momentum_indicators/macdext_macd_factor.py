# Auto-generated by factor_generator using polats ta-lib.py
import polars as pl
import polars_talib as plta

from vnpy.factor.template import FactorTemplate
from vnpy.factor.memory import FactorMemory

DEFAULT_DATETIME_COL = "datetime"


class MACDEXT_MACDFactor(FactorTemplate):
    """
    Calculates the MACDEXT_MACD indicator.
    """

    author = "Auto-Generated by FactorGenerator"
    factor_name = "MACDEXT_MACD"

    def __init__(self, setting: dict | None = None, vt_symbols: list[str] | None = None, **kwargs):
        """
        Initializes the MACDEXT_MACDFactor.
        Required parameters: fastperiod, fastmatype, slowperiod, slowmatype, signalperiod, signalmatype
        """
        super().__init__(setting, **kwargs)
        self.vt_symbols: list[str] = vt_symbols if vt_symbols else []

        # --- Parameter Validation and Assignment ---
        if not hasattr(self.params, "fastperiod"): raise ValueError(f"{self.factor_key} requires a 'fastperiod' parameter.")
        try: self.fastperiod = float(self.params.fastperiod)
        except (ValueError, TypeError): self.fastperiod = int(self.params.fastperiod)
        if not hasattr(self.params, "fastmatype"): raise ValueError(f"{self.factor_key} requires a 'fastmatype' parameter.")
        try: self.fastmatype = float(self.params.fastmatype)
        except (ValueError, TypeError): self.fastmatype = int(self.params.fastmatype)
        if not hasattr(self.params, "slowperiod"): raise ValueError(f"{self.factor_key} requires a 'slowperiod' parameter.")
        try: self.slowperiod = float(self.params.slowperiod)
        except (ValueError, TypeError): self.slowperiod = int(self.params.slowperiod)
        if not hasattr(self.params, "slowmatype"): raise ValueError(f"{self.factor_key} requires a 'slowmatype' parameter.")
        try: self.slowmatype = float(self.params.slowmatype)
        except (ValueError, TypeError): self.slowmatype = int(self.params.slowmatype)
        if not hasattr(self.params, "signalperiod"): raise ValueError(f"{self.factor_key} requires a 'signalperiod' parameter.")
        try: self.signalperiod = float(self.params.signalperiod)
        except (ValueError, TypeError): self.signalperiod = int(self.params.signalperiod)
        if not hasattr(self.params, "signalmatype"): raise ValueError(f"{self.factor_key} requires a 'signalmatype' parameter.")
        try: self.signalmatype = float(self.params.signalmatype)
        except (ValueError, TypeError): self.signalmatype = int(self.params.signalmatype)


    def calculate(self, input_data: dict[str, pl.DataFrame], memory: FactorMemory) -> pl.DataFrame:
        """Calculates the indicator and extracts the relevant component if necessary."""
        # --- Input Data Validation ---
        if input_data.get("close") is None or input_data["close"].is_empty(): return pl.DataFrame(data={}, schema=self.get_output_schema())

        # --- Core Calculation ---
        df_base = input_data.get("close") or next(iter(input_data.values()))

        symbol_columns = [col for col in df_base.columns if col != DEFAULT_DATETIME_COL]
        if self.vt_symbols:
            symbol_columns = [col for col in symbol_columns if col in self.vt_symbols]

        if not symbol_columns:
            return pl.DataFrame(data={}, schema=self.get_output_schema())

        kwargs = { "fastperiod": self.fastperiod, "fastmatype": self.fastmatype, "slowperiod": self.slowperiod, "slowmatype": self.slowmatype, "signalperiod": self.signalperiod, "signalmatype": self.signalmatype }
        expressions_to_run = []

        for symbol in symbol_columns:
            symbol_inputs = { "real": pl.col(symbol) }

            result_expr = plta.macdext(**symbol_inputs, **kwargs)

            # If this is a component of a multi-output function, extract the field.
            if "macd":
                result_expr = result_expr.struct.field("macd")

            expressions_to_run.append(result_expr.alias(symbol))

        # Join all necessary input dataframes for the calculation
        df_exec_base = df_base
        for col_name, df_wide in input_data.items():
            if col_name != "close" and col_name in {'close'}:
                if df_wide is not df_base:
                    df_exec_base = df_exec_base.join(df_wide.select(pl.all().exclude(DEFAULT_DATETIME_COL)), on=DEFAULT_DATETIME_COL, how="left")

        # Execute all expressions at once
        result_df = df_exec_base.select(pl.col(DEFAULT_DATETIME_COL), *expressions_to_run)
        return result_df

