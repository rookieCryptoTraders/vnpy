# Auto-generated by factor_generator using polats ta-lib.py
import polars as pl
import polars_talib as plta
from typing import Dict

from vnpy.factor.template import FactorTemplate
from vnpy.factor.memory import FactorMemory

DEFAULT_DATETIME_COL = "datetime"


class SAREXTFactor(FactorTemplate):
    """
    Calculates the SAREXT indicator.
    """

    author = "Auto-Generated by FactorGenerator"
    factor_name = "SAREXT"

    def __init__(self, setting: dict | None = None, vt_symbols: list[str] | None = None, **kwargs):
        """
        Initializes the SAREXTFactor.
        Required parameters: startvalue, offsetonreverse, accelerationinitlong, accelerationlong, accelerationmaxlong, accelerationinitshort, accelerationshort, accelerationmaxshort
        """
        super().__init__(setting, **kwargs)
        self.vt_symbols: list[str] = vt_symbols if vt_symbols else []

        # --- Parameter Validation and Assignment ---
        if not hasattr(self.params, "startvalue"): raise ValueError(f"{self.factor_key} requires a 'startvalue' parameter.")
        try: self.startvalue = float(self.params.startvalue)
        except (ValueError, TypeError): self.startvalue = int(self.params.startvalue)
        if not hasattr(self.params, "offsetonreverse"): raise ValueError(f"{self.factor_key} requires a 'offsetonreverse' parameter.")
        try: self.offsetonreverse = float(self.params.offsetonreverse)
        except (ValueError, TypeError): self.offsetonreverse = int(self.params.offsetonreverse)
        if not hasattr(self.params, "accelerationinitlong"): raise ValueError(f"{self.factor_key} requires a 'accelerationinitlong' parameter.")
        try: self.accelerationinitlong = float(self.params.accelerationinitlong)
        except (ValueError, TypeError): self.accelerationinitlong = int(self.params.accelerationinitlong)
        if not hasattr(self.params, "accelerationlong"): raise ValueError(f"{self.factor_key} requires a 'accelerationlong' parameter.")
        try: self.accelerationlong = float(self.params.accelerationlong)
        except (ValueError, TypeError): self.accelerationlong = int(self.params.accelerationlong)
        if not hasattr(self.params, "accelerationmaxlong"): raise ValueError(f"{self.factor_key} requires a 'accelerationmaxlong' parameter.")
        try: self.accelerationmaxlong = float(self.params.accelerationmaxlong)
        except (ValueError, TypeError): self.accelerationmaxlong = int(self.params.accelerationmaxlong)
        if not hasattr(self.params, "accelerationinitshort"): raise ValueError(f"{self.factor_key} requires a 'accelerationinitshort' parameter.")
        try: self.accelerationinitshort = float(self.params.accelerationinitshort)
        except (ValueError, TypeError): self.accelerationinitshort = int(self.params.accelerationinitshort)
        if not hasattr(self.params, "accelerationshort"): raise ValueError(f"{self.factor_key} requires a 'accelerationshort' parameter.")
        try: self.accelerationshort = float(self.params.accelerationshort)
        except (ValueError, TypeError): self.accelerationshort = int(self.params.accelerationshort)
        if not hasattr(self.params, "accelerationmaxshort"): raise ValueError(f"{self.factor_key} requires a 'accelerationmaxshort' parameter.")
        try: self.accelerationmaxshort = float(self.params.accelerationmaxshort)
        except (ValueError, TypeError): self.accelerationmaxshort = int(self.params.accelerationmaxshort)


    def calculate(self, input_data: Dict[str, pl.DataFrame], memory: FactorMemory) -> pl.DataFrame:
        """Calculates the indicator and extracts the relevant component if necessary."""
        # --- Input Data Validation ---
        if input_data.get("low") is None or input_data["low"].is_empty(): return pl.DataFrame(data={}, schema=self.get_output_schema())
        if input_data.get("high") is None or input_data["high"].is_empty(): return pl.DataFrame(data={}, schema=self.get_output_schema())

        # --- Core Calculation ---
        df_base = input_data.get("close") or next(iter(input_data.values()))

        symbol_columns = [col for col in df_base.columns if col != DEFAULT_DATETIME_COL]
        if self.vt_symbols:
            symbol_columns = [col for col in symbol_columns if col in self.vt_symbols]

        if not symbol_columns:
            return pl.DataFrame(data={}, schema=self.get_output_schema())

        kwargs = { "startvalue": self.startvalue, "offsetonreverse": self.offsetonreverse, "accelerationinitlong": self.accelerationinitlong, "accelerationlong": self.accelerationlong, "accelerationmaxlong": self.accelerationmaxlong, "accelerationinitshort": self.accelerationinitshort, "accelerationshort": self.accelerationshort, "accelerationmaxshort": self.accelerationmaxshort }
        expressions_to_run = []

        for symbol in symbol_columns:
            symbol_inputs = { "high": pl.col(symbol), "low": pl.col(symbol) }

            result_expr = plta.sarext(**symbol_inputs, **kwargs)

            # If this is a component of a multi-output function, extract the field.
            if "":
                result_expr = result_expr.struct.field("")

            expressions_to_run.append(result_expr.alias(symbol))

        # Join all necessary input dataframes for the calculation
        df_exec_base = df_base
        for col_name, df_wide in input_data.items():
            if col_name != "close" and col_name in {'low', 'high'}:
                if df_wide is not df_base:
                    df_exec_base = df_exec_base.join(df_wide.select(pl.all().exclude(DEFAULT_DATETIME_COL)), on=DEFAULT_DATETIME_COL, how="left")

        # Execute all expressions at once
        result_df = df_exec_base.select(pl.col(DEFAULT_DATETIME_COL), *expressions_to_run)
        return result_df

