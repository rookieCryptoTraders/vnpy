# Auto-generated by factor_generator using polats ta-lib.py
import polars as pl
import polars_talib as plta

from vnpy.factor.template import FactorTemplate
from vnpy.factor.memory import FactorMemory

DEFAULT_DATETIME_COL = "datetime"


class BBANDS_MIDDLEBAND(FactorTemplate):
    """
    Calculates the BBANDS_MIDDLEBAND indicator.
    """

    author = "Auto-Generated by FactorGenerator"
    factor_name = "BBANDS_MIDDLEBAND"

    def __init__(self, setting: dict | None = None, vt_symbols: list[str] | None = None, **kwargs):
        """
        Initializes the BBANDS_MIDDLEBAND.
        Required parameters: timeperiod, nbdevup, nbdevdn, matype
        """
        super().__init__(setting, **kwargs)
        self.vt_symbols: list[str] = vt_symbols if vt_symbols else []

        # --- Parameter Validation and Assignment ---
        if not hasattr(self.params, "timeperiod"): raise ValueError(f"{self.factor_key} requires a 'timeperiod' parameter.")
        try: self.timeperiod = float(self.params.timeperiod)
        except (ValueError, TypeError): self.timeperiod = int(self.params.timeperiod)
        if not hasattr(self.params, "nbdevup"): raise ValueError(f"{self.factor_key} requires a 'nbdevup' parameter.")
        try: self.nbdevup = float(self.params.nbdevup)
        except (ValueError, TypeError): self.nbdevup = int(self.params.nbdevup)
        if not hasattr(self.params, "nbdevdn"): raise ValueError(f"{self.factor_key} requires a 'nbdevdn' parameter.")
        try: self.nbdevdn = float(self.params.nbdevdn)
        except (ValueError, TypeError): self.nbdevdn = int(self.params.nbdevdn)
        if not hasattr(self.params, "matype"): raise ValueError(f"{self.factor_key} requires a 'matype' parameter.")
        try: self.matype = float(self.params.matype)
        except (ValueError, TypeError): self.matype = int(self.params.matype)

    def calculate(self, input_data: dict[str, pl.DataFrame], memory: FactorMemory) -> pl.DataFrame:
        """Calculates the indicator by iterating through symbols and executing eagerly."""
        # --- Input Data Validation ---
        if input_data.get("close") is None: return pl.DataFrame(data={}, schema=self.get_output_schema())

        # --- Eager Calculation Loop ---
        df_base = input_data.get("close") or next(iter(input_data.values()))
        symbol_columns = [col for col in df_base.columns if col != DEFAULT_DATETIME_COL]
        if self.vt_symbols:
            symbol_columns = [col for col in symbol_columns if col in self.vt_symbols]

        if not symbol_columns:
            return pl.DataFrame(data={}, schema=self.get_output_schema())

        kwargs = { "timeperiod": self.timeperiod, "nbdevup": self.nbdevup, "nbdevdn": self.nbdevdn, "matype": self.matype }
        output_series_list = []

        for symbol in symbol_columns:
            # Build the keyword arguments by extracting the pl.Series for this symbol
            # E.g., {'high': input_data['high'][symbol], 'low': input_data['low'][symbol]}
            symbol_inputs = { "real": input_data["close"][symbol] }

            # Execute the calculation immediately for this single symbol
            result_series_or_struct = plta.bbands(**symbol_inputs, **kwargs)

            # If this is a component of a multi-output function, extract the field.
            if "middleband":
                final_series = result_series_or_struct.struct.field("middleband")
            else:
                final_series = result_series_or_struct

            output_series_list.append(final_series.alias(symbol))

        # Combine the datetime column with the list of calculated series
        datetime_col_df = df_base.select(pl.col(DEFAULT_DATETIME_COL))
        result_df = datetime_col_df.with_columns(output_series_list)
        return result_df

